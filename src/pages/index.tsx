import * as React from "react";
import { PropsWithChildren, useCallback } from "react";
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "@app/utils/api";
import { Box, Button, Center, Flex, Heading, Spinner } from "@chakra-ui/react";

const PageLayout: React.FC<PropsWithChildren> = ({ children }) => {
  return (
    <Center
      w="full"
      minH="100vh"
      overscroll="none"
      className="bg-gradient-to-b from-[#2e026d] to-[#15162c]"
    >
      <Flex
        direction="column"
        align="center"
        maxW={{ xl: "1200px" }}
        m="0 auto"
      >
        {children}
      </Flex>
    </Center>
  );
};

const Home: NextPage = () => {
  const { status } = useSession();
  switch (status) {
    case "unauthenticated":
      return <LoginComponent />;
    case "authenticated":
      return <MainComponent />;
    case "loading":
      return <LoadingComponent />;
  }
  return null;
};

const LoginComponent = () => {
  const onSignInClick = useCallback(() => {
    signIn("google")
      .then(() => console.log("Signed in"))
      .catch(() => console.log("Sign in failed"));
  }, []);
  return (
    <PageLayout>
      <Heading color="white">Please login</Heading>
      <Button onClick={onSignInClick}>Sign in</Button>
    </PageLayout>
  );
};

const LoadingComponent = () => {
  return (
    <PageLayout>
      <Spinner color="white" size="xl" />
    </PageLayout>
  );
};

const MainComponent: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <Box borderRadius="2xl" bgColor="black">
          <Heading className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </Heading>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </Box>
      </main>
    </>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

export default Home;
