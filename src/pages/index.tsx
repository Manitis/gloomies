import * as React from "react";
import { PropsWithChildren, useCallback, useState } from "react";
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { api } from "@app/utils/api";
import {
  Box,
  Button,
  Center,
  Flex,
  Heading,
  Spinner,
  Text,
  useBoolean,
} from "@chakra-ui/react";

const PageLayout: React.FC<PropsWithChildren> = ({ children }) => {
  return (
    <Center
      w="full"
      minH="100vh"
      overscroll="none"
      className="bg-gradient-to-b from-[#2e026d] to-[#15162c]"
    >
      <Flex
        direction="column"
        align="center"
        maxW={{ xl: "1200px" }}
        m="0 auto"
      >
        {children}
      </Flex>
    </Center>
  );
};

const Home: NextPage = () => {
  const { status } = useSession();

  switch (status) {
    case "unauthenticated":
      return <LoginComponent />;
    case "authenticated":
      return <MainComponent />;
    case "loading":
      return (
        <LoadingComponent
          authStatus={status}
          test2="asdasd"
          person={{ age: 2, name: "Skuggi" }}
        />
      );
  }
  return null;
};

const LoginComponent = () => {
  const onSignInClick = useCallback(() => {
    signIn("google")
      .then(() => console.log("Signed in"))
      .catch(() => console.log("Sign in failed"));
  }, []);
  return (
    <PageLayout>
      <Heading color="white">Please login</Heading>
      <Button onClick={onSignInClick}>Sign in</Button>
    </PageLayout>
  );
};

type Props = { bla: string };

function LoadingComponent2(props: Props) {
  return <Text>{props.bla}</Text>;
}

type Person = {
  name: string;
  age: number;
};
type LoadingProps = {
  authStatus: string;
  test2: string;
  age?: number;
  person: Person;
};
const LoadingComponent = (props: LoadingProps) => {
  const { age, authStatus, person, test2 } = props;

  return (
    <PageLayout>
      <Spinner color="white" size="xl" />
      <Text>{authStatus}</Text>
      <Text>{age}</Text>
      <Text>{person.age}</Text>
      <Text>{person.name}</Text>
    </PageLayout>
  );
};

function TestUseState1() {
  const [count, setCount] = useState(0);
  if (10 == count) setCount(99);

  return <Button onClick={() => setCount(count + 1)}>{count}</Button>;
}

const TestUseState2 = () => {
  const [color, setColor] = useState("red");
  //const nextColor = "green";
  const handleClick = () => {
    if (color == "red") setColor("green");
    else if (color == "green") setColor("yellow");
    else if (color == "yellow") setColor("red");
  };

  return <Button onClick={handleClick} colorScheme={color} size="md"></Button>;
};
function TestFunction1() {
  const [flag, setFlag] = useBoolean();
  return (
    <Box>
      <p>Boolean state: {flag.toString()}</p>
      <Button onClick={setFlag.toggle} colorScheme="red">
        Click me to toggle the boolean value
      </Button>
    </Box>
  );
}

const MainComponent: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <Box
          display="flex"
          borderRadius="2xl"
          bgColor="black"
          h="200px"
          w="700px"
          bg="blue"
          justifyContent="center"
        >
          <Flex flex="2" bg="red" alignItems="center">
            <Button colorScheme="blue"> button </Button>
            <Heading textAlign="center"> Props </Heading>
          </Flex>
          <Box flex="1">
            <TestUseState1></TestUseState1>
            <TestFunction1></TestFunction1>
            <TestUseState2></TestUseState2>
            <TestUseState2></TestUseState2>
            <TestUseState2></TestUseState2>
            <TestUseState2></TestUseState2>
            <TestUseState2></TestUseState2>
            <TestUseState2></TestUseState2>
            <TestUseState2></TestUseState2>
          </Box>
          <Flex flex="1" bg="black" alignItems="center">
            <Heading textAlign="center">Test</Heading>
          </Flex>
          <Box flex="2" bg="yellow" alignSelf="flex-start">
            <Heading>Test</Heading>
          </Box>
          {/*<Heading*/}
          {/*  bg="red"*/}
          {/*  className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]"*/}
          {/*>*/}
          {/*  Create <span className="text-[hsl(280,100%,70%)]">T3</span> App*/}
          {/*</Heading>*/}
          {/*<Heading alignSelf="flex-start"*/}
          {/*  bg="red"*/}
          {/*  className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]"*/}
          {/*>*/}
          {/*  Create <span className="text-[hsl(280,100%,70%)]">T3</span> App*/}
          {/*</Heading>*/}
          {/*<AuthShowcase />*/}
        </Box>
      </PageLayout>
    </>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

export default Home;
